[
["data-wrangling.html", "Section 8 Data Wrangling 8.1 Row verbs 8.2 Practice 8.3 Column verbs 8.4 Practice 8.5 Aggregate verbs 8.6 Practice 8.7 Reshaping verbs 8.8 Practice", " Section 8 Data Wrangling We will mostly be using the tidyr and dplyr packages for wrangling. With those packages, most wrangling is done with 6 “data verbs.” These are select(), mutate(), filter(), arrange(), group_by(), and summarise(). One quick note: summarise can be spelled the British or American way (as can any word with dual spellings). Much of the software was developed by people in New Zealand, hence the British spellings. I learned with British spellings so that’s what I use, but it works either way. We can divide our verbs into 3 categories: row verbs, column verbs, and aggregate verbs. All of the verbs work in a similar way. The general structure is verb(data, action). 8.1 Row verbs The two row verbs are filter() and arrange(). Filter works by taking out rows that we don’t want in our data. Arrange works by ordering the rows in some way. We will talk about filter first. 8.1.1 Filter Filter takes in boolean statements and returns only the TRUE ones. For example, &gt;, &lt;, and == are boolean statements. The double equal is R’s way of saying something “is equivalent to.” Let’s start by creating a dataframe of only Saturday trips. # create a new dataframe called weekend_trips saturday_trips &lt;- filter(nice_ride_2018, start_day == &quot;Sat&quot;) dim(saturday_trips) # check that you have these dimensions ## [1] 66778 23 We can also make a dataframe of trips that ended after 12 noon. after_12 &lt;- filter(nice_ride_2018, end_hour &gt; 12) dim(after_12) ## [1] 277163 23 Let’s say we want some combination of filters. Maybe we want only the Saturday trips that ended after noon? We will use the &amp; operator in between filter actions. saturday_after_12 &lt;- filter(nice_ride_2018, end_hour &gt; 12 &amp; start_day == &quot;Sat&quot;) dim(saturday_after_12) ## [1] 47806 23 Now let’s make a dataframe of all the trips on a weekend day. We will use the | (or) operator in between filter actions. weekend_trips &lt;- filter(nice_ride_2018, start_day == &quot;Sat&quot; | start_day == &quot;Sun&quot;) dim(weekend_trips) ## [1] 129776 23 Let’s add Friday to that list. weekendFri_trips &lt;- filter(nice_ride_2018, start_day == &quot;Sat&quot; | start_day == &quot;Sun&quot; | start_day == &quot;Fri&quot;) dim(weekendFri_trips) ## [1] 190271 23 It gets a little long to write that all out, and this is a pretty simply query. Luckily, R has an %in% operator to filter “in bulk.” We would get the same results as above by writing: weekendFri_trips &lt;- filter(nice_ride_2018, start_day %in% c(&quot;Sat&quot;, &quot;Sun&quot;, &quot;Fri&quot;)) dim(weekendFri_trips) ## [1] 190271 23 8.1.2 Arrange Arrange is a way to order your dataset by specific variables. You can order by just one variable, like duration. 8.2 Practice How many trips were more than 30 minutes long? This is equivalent to 1800 seconds. 2 (a). How many casual trips were there on Wednesdays, Thursdays, and Fridays? 2 (b) . How many casual trips were there on Wednesdays, Thursdays, and Fridays that were 15 minutes or less? How many dockless trips taken by subscribed users were there total? 8.3 Column verbs Now that we’ve talked about wrangling the rows, we can think about wrangling the columns. mutate is used to create new columns, while select is used to narrow down the columns you keep in your table. 8.3.1 Mutate Let’s say we want to create a new duration variable that is in minutes instead of seconds. We can divide our old column by 60 to create the new column. nice_ride_2018 &lt;- mutate(nice_ride_2018, tripduration_min = tripduration / 60) head(nice_ride_2018$tripduration_min) ## [1] 22.883333 28.833333 9.116667 14.266667 7.583333 25.950000 8.4 Practice The average trip duration in minutes is 21.257 (see code below). summary(nice_ride_2018$tripduration_min) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.017 7.200 13.333 21.257 25.400 299.867 Create a new variation called duration_deviation that calculates how far each trip was from the mean. ## # A tibble: 6 x 1 ## duration_deviation ## &lt;dbl&gt; ## 1 1.63 ## 2 7.58 ## 3 -12.1 ## 4 -6.99 ## 5 -13.7 ## 6 4.69 8.5 Aggregate verbs 8.6 Practice Calculate the number of trips for each user type occurred at each start station. The structure should look like the example below: ## # A tibble: 6 x 3 ## # Groups: start_station_name [3] ## start_station_name usertype trips ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 100 Main Street SE Customer 6390 ## 2 100 Main Street SE Subscriber 1214 ## 3 10th Street E &amp; Cedar Street Customer 188 ## 4 10th Street E &amp; Cedar Street Subscriber 301 ## 5 11th Ave S &amp; S 2nd Street Customer 6312 ## 6 11th Ave S &amp; S 2nd Street Subscriber 1589 8.7 Reshaping verbs 8.7.1 Spread 8.7.2 Gather 8.8 Practice "]
]
