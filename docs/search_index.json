[
["index.html", "An Introduction to R at Met Council Section 1 Welcome!", " An Introduction to R at Met Council Katie Jolly 2019-08-04 Section 1 Welcome! This book is meant to be a reference for before, during, and after the in-person session on August 14. It is not comprehensive, but should serve as a way to help illustrate the different concepts. My hope is that at the end of it, everyone will be able to read in data, clean and wrangle it, plot it, and do some simple analysis. R is a powerful language for statistical analysis and data communication and we will only get to the surface of everything today. For example, this map was map entirely with R (as was this book)! Notes: If you find typos, errors, or clarity issues, please let me know! If you want to share this resource (or happen upon it on the internet) feel free to share it, I just ask that you credit properly (whether that is me or someone I’ve credited). "],
["setup.html", "Section 2 Installing R and RStudio", " Section 2 Installing R and RStudio In order to save time, you should have R and RStudio Desktop downloaded, in that order. Here is one guide to walk you through the process: https://www.ics.uci.edu/~sternh/courses/210/InstallingRandRStudio.pdf Note that you should just download the most recent version, the version numbers in that document are likely out of date. Once you have both installed, open RStudio and see if it looks like this (minor deviations are totally fine): R is the underlying language while RStudio is typically how you will interact with it. RStudio is an integrated development environment (IDE) that is generally considered to be one of the best available. It’s also entirely open source and free (unless you want special features) which is unique among IDEs of its quality. The IDE means that rather than just being a place for you to write code, “it includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management” (RStudio). In short, this means it makes your code-writing so much smoother. If you have any questions or run into issues, feel free to stop by my cube or email me! "],
["r-projects.html", "Section 3 R Projects 3.1 Set up your project", " Section 3 R Projects When working on an analysis with R, the recommended workflow is to use R Projects. This is also called “project-oriented workflow” in some other tutorials. Projects are nice because they keep all of the data, code, writing, etc. for a particular task in one place. You don’t have to worry about working directories and reproducibility is more straightforward. It allows you to use relative versus absolute pathnames, this is awesome when working with collaborators. Let’s make a project for this workshop! 3.1 Set up your project In the upper right corner of your RStudio window, you’ll see Project: (None). Click on that, then select New Project.... Next select New Directory. Then select New Project from the list of options. Then you can name your project (think of it as naming the folder where you’ll keep all of your work). I like to include the date in my file names as well. The second part (Create project as a subdirectory of:) is where you want this folder to live on your computer. The default for Windows is your Documents/ folder. Once you’ve done that, click Create Project. You should now see your current project name in the corner where before you saw Project: (None). "],
["writing-r-code.html", "Section 4 Writing R code 4.1 The console 4.2 R scripts 4.3 R markdown", " Section 4 Writing R code There are three main places to write R code while using RStudio. In order of complexity, they are: the console, R scripts, and R markdown. 4.1 The console The console should be thought of as scratch paper. It’s a way to test code before writing it in a document. It’s also nice for code that you only need to run once, like installing a package. 4.1.1 Try it out Type 3+2 and hit enter Type x &lt;- 3+2 and hit enter Then, type x and hit enter What did you get back when you typed x into the console? Type x * 4 and hit enter What happened now? 4.1.2 R objects R stores information in objects, or variables. We created an object called x by naming it and assigning it with the &lt;- function to the value 3+2. You may also see people write x = 3+2 but that is less common. Object names should be short and meaningful. They cannot start with a number and the only special characters allowed are . and _. Names are also case sensitive, as is all R code. Certain words have special meanings and cannot be used as object names. These include words like if and else because they have other meanings in R. if &lt;- 3+2 ## Error: &lt;text&gt;:1:4: unexpected assignment ## 1: if &lt;- ## ^ It won’t let us create the variable because it’s an off-limits name. As a matter of style, it is recommended to: Use nouns Avoid using . in names Avoid using function names, even when technically allowed (this will become easier with time as you learn more function names) Pick a style and go with it For example, I prefer using _ in my object names instead of camelCase. If you want to learn more about style, consider reading the guides written by Google or the Tidyverse packages later. 4.2 R scripts R scripts allow you to save the code that you write to run again later. They are essentially a document meant to read code. Let’s make one. Go to File &gt; New File &gt; R Script or ctrl + shift + N. Save your new R script in a new folder called R within your project folder. On the first line, create an object that is assigned to your name. In R, characters (words) need to be surrounded by quotes. Numbers do not. First, try without quotes. To run this either press the run button at the top of the script or press ctrl + enter when your cursor is on the line you want to run. name &lt;- Katie ## Error in eval(expr, envir, enclos): object &#39;Katie&#39; not found It’s looking for an object called Katie. Why? In R, variable names do not need quotes. This is how they are distinguised visually from character data. Let’s try again. name &lt;- &quot;Katie&quot; 4.2.1 Comments Whenever you’re writing code, think of it as writing for someone who isn’t you. What this means is that you should leave comments that explain your thought process. People have differing opinions on what a good comment is, but it generally shouldn’t be something that just repeats the code. It should be something about why you chose that function, what you expect to get in your output, issues you had, etc etc. In R you can write a comment by having a # at the beginning of the line. In your script, write a comment to yourself about one thing you hope to be able to do in R after the workshop today. 4.3 R markdown The third, and most universally useful in my opinion, way to write code is in an R markdown document. If you’ve used Jupyter notebooks in Python, it’s a similar idea. R markdown is a way to interweave code, analysis, output, and prose. The pandoc engine “knits” your document into a Word doc, PDF, or HTML. This book is an HTML file knitted from a bunch of R markdowns! Today we will be working in R markdown to save our work and be able to reference it later. To create an R markdown, go to File &gt; New File &gt; R Markdown… Write a title for your document (this is not the same thing as naming the file), add your name, and select HTML as the output format. Erase everything in your document except the header. This is the part enclosed by ---. But let me know if you accidentally delete that too! It’s not hard to fix. Anything typed just directly onto the document is plain text. We will write code in “chunks” later. There are also nice ways to include HTML elements like headers and bold text. At the top of your document, write a short paragraph about the best thing that happened to you last week. Start it with the header # Best part of last week. The # in plain text indicates a header. In your paragraph, use bold text at least once and bullet points at least twice. Use the R markdown cheat sheet to figure out how to do that. Next, add this photo to your R markdown: https://www.metrotransit.org/Data/Sites/1/media/metro/greenline/metro_greenline_map_031716_web.png Finally, insert an R chunk from the top of the document by clicking Insert &gt; R or ctrl + alt + i. Type 3 + 4 and then run the code with the green arrow. Now, knit your HTML (Knit) to see what it looks like! "],
["packages.html", "Section 5 Packages", " Section 5 Packages R as a language on its own is useful, but the open-source nature of R means that packages can greatly extend its capabilities. Instead of writing a function for every process, there’s a good chance someone else already has! There are packages for nearly every task you might want to do in R. If you’re an ArcGIS user, one analogy for a package is that it is similar to extensions like Spatial Analyst. If you want to take a more literal approach each function of ArcGIS can be thought of like a package because someone has already taken the time to write that code and make it generally useful. For this tutorial, you’ll need a few main packages. Type (don’t copy/paste) this code into your console (see image below). Click “OK” if it prompts you to restart R. This will only restart the underlying R engine, not your RStudio interface. install.packages(c(&quot;knitr&quot;, &quot;tidyverse&quot;, &quot;fivethirtyeight&quot;, &quot;rmarkdown&quot;)) You can check that your packages installed correctly by loading the libraries into your R session. library(knitr) library(tidyverse) library(fivethirtyeight) library(rmarkdown) If you don’t see an error, you’re good-to-go. "],
["reading-in-data.html", "Section 6 Reading in Data 6.1 Data packages", " Section 6 Reading in Data I am a strong believer in the cake-first approach to teaching/learning R. It emphasizes real-world examples, interesting data, and visual feedback. Because of that, I like to use ready-made data packages like fivethirtyeight and talk about visualization before data cleaning. But I also think reading in data is an important skill so we will talk about that briefly at the end of today, but not spend too much time on it. For now, let’s eat the cake instead of going out to get the ingredients. That’s more fun anyway. 6.1 Data packages There are a number of packages in R specifically to make data sharing easier. A few examples are: fivethirtyeight to share to data used in their articles bikedata to share data about certain bikeshare systems ecoengine to share data from the Berkley natural history museum We will use the data on diversity in biopics from FiveThirtyEight. 6.1.1 Try it out In your R markdown, fill in the following code to load your library: ___(fivethirtyeight) To pull a particular dataset from this package, we can use the data() function. data(&quot;biopics&quot;) # biopics dataset You should now see it in your global working environment. There are also a few different ways to get quick summaries of the data. First, you can check the dimensions to get the number of rows and columns. dim(biopics) ## [1] 761 14 What function would you use to get just the number of columns? ___(biopics) We can also print the first 6 rows of the data with the head() function. head(biopics) ## # A tibble: 6 x 14 ## title site country year_release box_office director number_of_subje~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 10 R~ tt00~ UK 1971 NA Richard~ 1 ## 2 12 Y~ tt20~ US/UK 2013 56700000 Steve M~ 1 ## 3 127 ~ tt15~ US/UK 2010 18300000 Danny B~ 1 ## 4 1987 tt28~ Canada 2014 NA Ricardo~ 1 ## 5 20 D~ tt01~ US 1998 537000 Myles B~ 1 ## 6 21 tt04~ US 2008 81200000 Robert ~ 1 ## # ... with 7 more variables: subject &lt;chr&gt;, type_of_subject &lt;chr&gt;, ## # race_known &lt;chr&gt;, subject_race &lt;chr&gt;, person_of_color &lt;lgl&gt;, ## # subject_sex &lt;chr&gt;, lead_actor_actress &lt;chr&gt; How can we modify this code to print the first 10 rows instead? head(biopics, __ = ___) We can also just get a summary of each variable. summary(biopics) ## title site country year_release ## Length:761 Length:761 Length:761 Min. :1915 ## Class :character Class :character Class :character 1st Qu.:1969 ## Mode :character Mode :character Mode :character Median :1995 ## Mean :1987 ## 3rd Qu.:2007 ## Max. :2014 ## ## box_office director number_of_subjects ## Min. : 3150 Length:761 Min. :1.000 ## 1st Qu.: 1170000 Class :character 1st Qu.:1.000 ## Median : 6140000 Mode :character Median :1.000 ## Mean : 22981174 Mean :1.268 ## 3rd Qu.: 30500000 3rd Qu.:1.000 ## Max. :350000000 Max. :4.000 ## NA&#39;s :324 ## subject type_of_subject race_known ## Length:761 Length:761 Length:761 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## ## ## subject_race person_of_color subject_sex lead_actor_actress ## Length:761 Mode :logical Length:761 Length:761 ## Class :character FALSE:661 Class :character Class :character ## Mode :character TRUE :100 Mode :character Mode :character ## ## ## ## But you’ll notice these aren’t that meaningful for the character variables. Another way we can extract information about a variable is to use the $ operator. To just pull out one variable from a dataset, you would write data$variable. We can use this syntax to make a table of the countries. table(biopics$country) ## ## Canada Canada/UK UK US US/Canada ## 18 13 146 489 11 ## US/UK US/UK/Canada ## 82 2 6.1.2 Practice How many of the biopics were produced only in Canada? What is the mean number of subjects in the movies? How many subjects were female? "],
["visualization.html", "Section 7 Visualization", " Section 7 Visualization "],
["data-wrangling.html", "Section 8 Data Wrangling", " Section 8 Data Wrangling "],
["visualization-revisited.html", "Section 9 Visualization, revisited", " Section 9 Visualization, revisited "],
["modeling.html", "Section 10 Modeling", " Section 10 Modeling "],
["reading-in-data-revisited.html", "Section 11 Reading in data, revisited", " Section 11 Reading in data, revisited "],
["more-resources.html", "Section 12 More resources", " Section 12 More resources "],
["miscellaneous-notes.html", "Section 13 Miscellaneous notes", " Section 13 Miscellaneous notes "]
]
