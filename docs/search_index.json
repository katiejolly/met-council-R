[
["index.html", "An Introduction to R at Met Council Section 1 Welcome!", " An Introduction to R at Met Council Katie Jolly 2019-08-07 Section 1 Welcome! This book is meant to be a reference for before, during, and after the in-person session on August 14. It is not comprehensive, but should serve as a way to help illustrate the different concepts. My hope is that at the end of it, everyone will be able to read in data, clean and wrangle it, plot it, and do some simple analysis. R is a powerful language for statistical analysis and data communication and we will only get to the surface of everything today. For example, this map was map entirely with R (as was this book)! Notes: If you find typos, errors, or clarity issues, please let me know! If you want to share this resource (or happen upon it on the internet) feel free to share it, I just ask that you credit properly (whether that is me or someone I’ve credited). "],
["setup.html", "Section 2 Installing R and RStudio 2.1 RStudio Cloud 2.2 RStudio Desktop", " Section 2 Installing R and RStudio R is the underlying language while RStudio is typically how you will interact with it. RStudio is an integrated development environment (IDE) that is generally considered to be one of the best available. It’s also entirely open source and free (unless you want special features) which is unique among IDEs of its quality. The IDE means that rather than just being a place for you to write code, “it includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management” (RStudio). In short, this means it makes your code-writing so much smoother. 2.1 RStudio Cloud In this workshop, we will be using the RStudio cloud option. I don’t recommend this for long-term use, but it’s an awesome resource that makes learning R easier and less dependent on software installation. Each project is allocated 1GB of RAM which is fine for this workshop, but is not enough for joining large datasets or fitting complicated models. To create your cloud account, go to the sign-up page. Click “Get Started” and enter credentials for yourself. Once you’re logged in, your workspace should look something like this: 2.2 RStudio Desktop In order to run RStudio on your desktop, you should have R and RStudio Desktop downloaded, in that order. Here is one guide to walk you through the process: https://www.ics.uci.edu/~sternh/courses/210/InstallingRandRStudio.pdf Note that you should just download the most recent version, the version numbers in that document are likely out of date. Once you have both installed, open RStudio and see if it looks like this (minor deviations are totally fine): If you have any questions or run into issues, feel free to stop by my cube or email me! "],
["r-projects.html", "Section 3 R Projects 3.1 Set up your project: Cloud 3.2 Set up your project: Desktop", " Section 3 R Projects When working on an analysis with R, the recommended workflow is to use R Projects. This is also called “project-oriented workflow” in some other tutorials. Projects are nice because they keep all of the data, code, writing, etc. for a particular task in one place. You don’t have to worry about working directories and reproducibility is more straightforward. It allows you to use relative versus absolute pathnames, this is awesome when working with collaborators. Let’s make a project for this workshop! 3.1 Set up your project: Cloud In your RStudio cloud workspace, click the New Project button to start a project. Once it is open, you can name it by Untitled Project where it says Your Workspace/Untitled Project at the top of the screen. Name it something short but meaningful with no spaces or special characters except - or _. 3.2 Set up your project: Desktop In the upper right corner of your RStudio window, you’ll see Project: (None). Click on that, then select New Project.... Next select New Directory. Then select New Project from the list of options. Then you can name your project (think of it as naming the folder where you’ll keep all of your work). I like to include the date in my file names as well. The second part (Create project as a subdirectory of:) is where you want this folder to live on your computer. The default for Windows is your Documents/ folder. Once you’ve done that, click Create Project. You should now see your current project name in the corner where before you saw Project: (None). "],
["writing-r-code.html", "Section 4 Writing R code 4.1 The console 4.2 R scripts 4.3 R markdown", " Section 4 Writing R code There are three main places to write R code while using RStudio. In order of complexity, they are: the console, R scripts, and R markdown. 4.1 The console The console should be thought of as scratch paper. It’s a way to test code before writing it in a document. It’s also nice for code that you only need to run once, like installing a package. 4.1.1 Try it out Type 3+2 and hit enter Type x &lt;- 3+2 and hit enter Then, type x and hit enter What did you get back when you typed x into the console? Type x * 4 and hit enter What happened now? 4.1.2 R objects R stores information in objects, or variables. We created an object called x by naming it and assigning it with the &lt;- function to the value 3+2. You may also see people write x = 3+2 but that is less common. Object names should be short and meaningful. They cannot start with a number and the only special characters allowed are . and _. Names are also case sensitive, as is all R code. Certain words have special meanings and cannot be used as object names. These include words like if and else because they have other meanings in R. if &lt;- 3+2 ## Error: &lt;text&gt;:1:4: unexpected assignment ## 1: if &lt;- ## ^ It won’t let us create the variable because it’s an off-limits name. As a matter of style, it is recommended to: Use nouns Avoid using . in names Avoid using function names, even when technically allowed (this will become easier with time as you learn more function names) Pick a style and go with it For example, I prefer using _ in my object names instead of camelCase. If you want to learn more about style, consider reading the guides written by Google or the Tidyverse packages later. 4.2 R scripts R scripts allow you to save the code that you write to run again later. They are essentially a document meant to read code. Let’s make one. Go to File &gt; New File &gt; R Script or ctrl + shift + N. Save your new R script in a new folder called R within your project folder. On the first line, create an object that is assigned to your name. In R, characters (words) need to be surrounded by quotes. Numbers do not. First, try without quotes. To run this either press the run button at the top of the script or press ctrl + enter when your cursor is on the line you want to run. name &lt;- Katie ## Error in eval(expr, envir, enclos): object &#39;Katie&#39; not found It’s looking for an object called Katie. Why? In R, variable names do not need quotes. This is how they are distinguished visually from character data. Let’s try again. name &lt;- &quot;Katie&quot; 4.2.1 Comments Whenever you’re writing code, think of it as writing for someone who isn’t you. What this means is that you should leave comments that explain your thought process. People have differing opinions on what a good comment is, but it generally shouldn’t be something that just repeats the code. It should be something about why you chose that function, what you expect to get in your output, issues you had, etc etc. In R you can write a comment by having a # at the beginning of the line. In your script, write a comment to yourself about one thing you hope to be able to do in R after the workshop today. 4.3 R markdown The third, and most universally useful in my opinion, way to write code is in an R markdown document. If you’ve used Jupyter notebooks in Python, it’s a similar idea. R markdown is a way to interweave code, analysis, output, and prose. The pandoc engine “knits” your document into a Word doc, PDF, or HTML. This book is an HTML file knitted from a bunch of R markdowns! Today we will be working in R markdown to save our work and be able to reference it later. To create an R markdown, go to File &gt; New File &gt; R Markdown… Write a title for your document (this is not the same thing as naming the file), add your name, and select HTML as the output format. Erase everything in your document except the header. This is the part enclosed by ---. But let me know if you accidentally delete that too! It’s not hard to fix. Anything typed just directly onto the document is plain text. We will write code in “chunks” later. There are also nice ways to include HTML elements like headers and bold text. At the top of your document, write a short paragraph about the best thing that happened to you last week. Start it with the header # Best part of last week. The # in plain text indicates a header. In your paragraph, use bold text at least once and bullet points at least twice. Use the R markdown cheat sheet to figure out how to do that. Next, add this photo to your R markdown (Google this, hint: you will use parentheses and square brackets): https://www.metrotransit.org/Data/Sites/1/media/metro/greenline/metro_greenline_map_031716_web.png Finally, insert an R chunk from the top of the document by clicking Insert &gt; R or ctrl + alt + i. Type 3 + 4 and then run the code with the green arrow. Now, knit your HTML (Knit) to see what it looks like! "],
["packages.html", "Section 5 Packages", " Section 5 Packages R as a language on its own is useful, but the open-source nature of R means that packages can greatly extend its capabilities. Instead of writing a function for every process, there’s a good chance someone else already has! There are packages for nearly every task you might want to do in R. If you’re an ArcGIS user, one analogy for a package is that it is similar to extensions like Spatial Analyst. If you want to take a more literal approach each function of ArcGIS can be thought of like a package because someone has already taken the time to write that code and make it generally useful. For this tutorial, you’ll need a few main packages. Type (don’t copy/paste) this code into your console (see image below) and click enter. Click “OK” if it prompts you to restart R. This will only restart the underlying R engine, not your RStudio interface. install.packages(c(&quot;knitr&quot;, &quot;tidyverse&quot;, &quot;devtools&quot;, &quot;rmarkdown&quot;)) You can check that your packages installed correctly by loading the libraries into your R session. Type this into your console and press enter. library(knitr) library(tidyverse) library(devtools) library(rmarkdown) If you don’t see an error, you’re good-to-go. "],
["reading-in-data.html", "Section 6 Reading in Data 6.1 Data packages", " Section 6 Reading in Data I am a strong believer in the cake-first approach to teaching/learning R. It emphasizes real-world examples, interesting data, and visual feedback. Because of that, I like to use ready-made data packages like fivethirtyeight and talk about visualization before data cleaning. But I also think reading in data is an important skill so we will talk about that briefly at the end of today, but not spend too much time on it. For now, let’s eat the cake instead of going out to get the ingredients. That’s more fun anyway. 6.1 Data packages There are a number of packages in R specifically to make data sharing easier. A few examples are: fivethirtyeight to share to data used in their articles bikedata to share data about certain bikeshare systems ecoengine to share data from the Berkley natural history museum We will use the data the MN niceride system. I put the data in a package called metcouncilR so it’s easy to use. You can install it by typing install_github(&quot;katiejolly/metcouncilR&quot;) in your console. 6.1.1 Try it out In your R markdown, fill in the following code to load your library: ___(metcouncilR) To pull a particular dataset from this package, we can use the data() function. data(&quot;nice_ride_2018&quot;) # niceride dataset You should now see it in your global working environment. I’ve written documentation for this data that you can see in the help pane in RStudio. help(&quot;nice_ride_2018&quot;) There are also a few different ways to get quick summaries of the data. First, you can check the dimensions to get the number of rows and columns. dim(nice_ride_2018) ## [1] 409002 22 What function would you use to get just the number of columns? (Google it.) ___(nice_ride_2018) We can also print the first 6 rows of the data with the head() function. head(nice_ride_2018) ## # A tibble: 6 x 22 ## tripduration start_datetime end_datetime start_station_id start_station_n~ start_station_l~ start_station_l~ end_station_id end_station_name ## &lt;dbl&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1373 2018-04-24 16:03:04 2018-04-24 16:25:57 170 Boom Island Park 45.0 -93.3 2 100 Main Street~ ## 2 1730 2018-04-24 16:38:40 2018-04-24 17:07:31 2 100 Main Street~ 45.0 -93.3 13 North 2nd Stree~ ## 3 547 2018-04-24 17:51:10 2018-04-24 18:00:17 13 North 2nd Stree~ 45.0 -93.3 94 Portland Ave &amp; ~ ## 4 856 2018-04-24 18:50:05 2018-04-24 19:04:22 94 Portland Ave &amp; ~ 45.0 -93.3 13 North 2nd Stree~ ## 5 455 2018-04-25 08:49:05 2018-04-25 08:56:40 13 North 2nd Stree~ 45.0 -93.3 43 Nicollet Mall &amp;~ ## 6 1557 2018-04-27 11:57:03 2018-04-27 12:23:01 43 Nicollet Mall &amp;~ 45.0 -93.3 167 11th Ave S &amp; S ~ ## # ... with 13 more variables: end_station_latitude &lt;dbl&gt;, end_station_longitude &lt;dbl&gt;, bikeid &lt;dbl&gt;, usertype &lt;chr&gt;, birth_year &lt;dbl&gt;, gender &lt;dbl&gt;, ## # bike_type &lt;chr&gt;, start_month &lt;dbl&gt;, start_day &lt;ord&gt;, end_month &lt;dbl&gt;, end_day &lt;ord&gt;, start_hour &lt;int&gt;, end_hour &lt;int&gt; How can we modify this code to print the first 10 rows instead? (hint: help(head) to see the documentation) head(nice_ride_2018, __ = ___) We can also just get a summary of each variable. summary(nice_ride_2018) ## tripduration start_datetime end_datetime start_station_id start_station_name start_station_latitude start_station_longitude ## Min. : 61 Min. :2018-04-12 08:49:49 Min. :2018-04-12 09:31:20 Min. : 2.0 Length:409002 Min. :44.89 Min. :-93.33 ## 1st Qu.: 432 1st Qu.:2018-06-08 15:02:34 1st Qu.:2018-06-08 15:34:45 1st Qu.: 37.0 Class :character 1st Qu.:44.96 1st Qu.:-93.27 ## Median : 800 Median :2018-07-18 08:40:36 Median :2018-07-18 08:54:47 Median : 94.0 Mode :character Median :44.97 Median :-93.26 ## Mean : 1275 Mean :2018-07-20 03:50:06 Mean :2018-07-20 04:11:22 Mean :103.4 Mean :44.97 Mean :-93.25 ## 3rd Qu.: 1524 3rd Qu.:2018-08-27 20:09:25 3rd Qu.:2018-08-27 20:37:36 3rd Qu.:171.0 3rd Qu.:44.98 3rd Qu.:-93.23 ## Max. :17992 Max. :2018-11-17 23:13:49 Max. :2018-11-17 23:19:36 Max. :226.0 Max. :45.04 Max. :-93.08 ## NA&#39;s :13251 ## end_station_id end_station_name end_station_latitude end_station_longitude bikeid usertype birth_year gender bike_type ## Min. : 2.0 Length:409002 Min. :44.89 Min. :-93.35 Min. : 2 Length:409002 Min. :1911 Min. :0.0000 Length:409002 ## 1st Qu.: 38.0 Class :character 1st Qu.:44.96 1st Qu.:-93.27 1st Qu.: 530 Class :character 1st Qu.:1969 1st Qu.:0.0000 Class :character ## Median : 95.0 Mode :character Median :44.97 Median :-93.26 Median :1056 Mode :character Median :1969 Median :1.0000 Mode :character ## Mean :103.6 Mean :44.97 Mean :-93.25 Mean :1092 Mean :1976 Mean :0.7097 ## 3rd Qu.:170.0 3rd Qu.:44.98 3rd Qu.:-93.23 3rd Qu.:1627 3rd Qu.:1986 3rd Qu.:1.0000 ## Max. :226.0 Max. :45.04 Max. :-93.08 Max. :3341 Max. :2000 Max. :2.0000 ## NA&#39;s :13251 ## start_month start_day end_month end_day start_hour end_hour ## Min. : 4.000 Sun:62998 Min. : 4.000 Sun:63368 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 6.000 Mon:52558 1st Qu.: 6.000 Mon:52638 1st Qu.:11.00 1st Qu.:11.00 ## Median : 7.000 Tue:51657 Median : 7.000 Tue:51585 Median :15.00 Median :15.00 ## Mean : 7.102 Wed:56859 Mean : 7.102 Wed:56843 Mean :14.26 Mean :14.46 ## 3rd Qu.: 8.000 Thu:57657 3rd Qu.: 8.000 Thu:57670 3rd Qu.:18.00 3rd Qu.:18.00 ## Max. :11.000 Fri:60495 Max. :11.000 Fri:60193 Max. :23.00 Max. :23.00 ## Sat:66778 Sat:66705 But you’ll notice these aren’t that meaningful for the character variables. Another way we can extract information about a variable is to use the $ operator. To just pull out one variable from a dataset, you would write data$variable. We can use this syntax to make a table of the user types. table(nice_ride_2018$usertype) ## ## Customer Subscriber ## 287709 121293 6.1.2 Practice How many of the users were female? What was the longest trip duration? Looking at the documentation, why might an end station name be empty? Looking at the documentation, what is the unit of the tripduration variable empty? What kinds of trips are excluded from this data? "],
["visualization.html", "Section 7 Visualization 7.1 Base R plotting 7.2 ggplot2 7.3 Practice", " Section 7 Visualization We will start with univariate visualization to learn the syntax, and then later move into more complex multivariate visualizations. R has some built-in plotting ability. It’s good to recognize the syntax, but it’s not super common to see “in-the-wild” these days. 7.1 Base R plotting R can make histograms: hist(nice_ride_2018$tripduration) And bar plots: barplot(table(nice_ride_2018$usertype), main = &quot;User Type&quot;) barplot(table(nice_ride_2018$bike_type), main = &quot;Bike Type&quot;) But base R plots are hard to customize and an inconsistent syntax. There’s general agreement that they’re not the best way to plot data in R so we aren’t going to talk much about it. 7.2 ggplot2 ggplot2 is without competiton in the graphics in R world. Not only is it the most popular plotting package, it’s one of the most popular packages, period. It is included in the tidyverse, which we already loaded. Part of the strength of ggplot is its customizability. You can create beautiful plots all in R with it. For example, the map on the cover of this book was made with ggplot. ggplot uses the “grammar of graphics” to layer information onto plots. Each plot has the same general structure which makes it easy once you learn the structure. 7.2.1 Categorical data For example, let’s recreate the bar plot of user types from above. We will layer on the information in stages. Stage 1: The plotting canvas ggplot(nice_ride_2018) # set up our plotting area Stage 2: Frame your data with axes ggplot(nice_ride_2018, aes(x = usertype)) # set up our axes Stage 3: Add some shapes ggplot(nice_ride_2018, aes(x = usertype)) + geom_bar() # add the geoms Stage 4: Give your plot a title and axis labels ggplot(nice_ride_2018, aes(x = usertype)) + geom_bar() + labs(title = &quot;User Types&quot;, x = &quot;User Type&quot;, y = &quot;Trips&quot;) # add a title Now we have a plot! There are many ways to customize it, but for now this is a great start. 7.2.2 Try it out Let’s create a plot of the bike types (bike_type). Stage 1: The plotting canvas ___(nice_ride_2018) # set up our plotting area Stage 2: Frame your data with axes ___(nice_ride_2018, ___(x = ___)) # set up our axes Stage 3: Add some shapes ___(nice_ride_2018, ___(x = ___)) + geom____() # add the geoms Stage 4: Give your plot a title and axis labels ___(nice_ride_2018, ___(x = ___)) + geom____() + ___(title = ___, x = ___, y = ___) # add a title Does your plot look like this? 7.2.3 Quantitative data We will use histograms and density plots as the univariate quantitative plots (boxplots could also be an option). Let’s first recreate the start_month histogram from above. Stage 1: The plotting canvas ggplot(nice_ride_2018) # set up our plotting area Stage 2: Frame your data with axes ggplot(nice_ride_2018, aes(x = tripduration)) # set up our axes Stage 3: Add some shapes ggplot(nice_ride_2018, aes(x = tripduration)) + geom_histogram() # add the geoms and the total number of geoms that you want ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Stage 4: Add a title and axis labels ggplot(nice_ride_2018, aes(x = tripduration)) + geom_histogram() + # add the geoms labs(title = &quot;Durations of trips under 5 hours (in seconds)&quot;, x = &quot;Duration (seconds)&quot;, y = &quot;Trips&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 7.3 Practice Make a plot of the start_day variable with a good title and axis labels. Change the fill of the bars to cyan4 Add a theme with ... + theme_...() Add a caption that says Source: Niceride MN In the end, your plot should look something like this: ggplot(nice_ride_2018, aes(x = start_day)) + geom_bar(fill = &quot;cyan4&quot;) + theme_minimal() + labs(title = &quot;What days did people use niceride in 2018? Weekends are a favorite.&quot;, x = &quot;Day of the week&quot;, y = &quot;Trips&quot;, caption = &quot;Source: Niceride MN&quot;) "],
["data-wrangling.html", "Section 8 Data Wrangling", " Section 8 Data Wrangling "],
["visualization-revisited.html", "Section 9 Visualization, revisited", " Section 9 Visualization, revisited "],
["modeling.html", "Section 10 Modeling", " Section 10 Modeling "],
["reading-in-data-revisited.html", "Section 11 Reading in data, revisited", " Section 11 Reading in data, revisited "],
["more-resources.html", "Section 12 More resources 12.1 Projects using this data 12.2 General R Programming 12.3 R Projects (and reproducibility) 12.4 R Markdown 12.5 Wrangling &amp; Visualization 12.6 Reading in Data 12.7 Modeling and Statistical Inference 12.8 GIS and Urban Planning", " Section 12 More resources 12.1 Projects using this data Inferred Route Preferences in Bike Sharing (this one uses R and prints the code used!) Station-Level Forecasting of Bike Sharing Ridership: Station Network Effects in Three U.S. Systems Where do the Nice Riders go? 12.2 General R Programming R cheat sheets R for Data Science Advanced R Software Carpentry: Programming with R Data Carpentry: R for Social Scientists Data Carpentry: Introduction to R for Geospatial Data Data Carpentry: Introduction to Raster and Vector Geospatial Data in R 12.3 R Projects (and reproducibility) R OpenSci Reprocibility Guide R OpenSci Community Call: Reproducible Research with R 12.4 R Markdown R Markdown: The Definitive Guide flexdashboard: Easy interactive dashboards for R R Markdown gallery 12.5 Wrangling &amp; Visualization Writing Narratives with Data: An Introduction to ggplot (by me) Exploring DC’s bikeshare system: Wrangling with dplyr (by me) Political Donations from the STEM Community: Learning dplyr (by me) Suzan Baert’s blog posts on dplyr tricks: Basic to Advanced Ways to Select Columns, Transforming your columns into the right shape, Basic and more advanced ways to filter rows, Summarizing and slicing your data Top 50 ggplot2 visualizations- The master list (with full R code) Complete ggplot2 tutorial part 1 and part 2 12.6 Reading in Data This R data import tutorial is everything you need Reading and writing CSV files 12.7 Modeling and Statistical Inference Statistical Inference via Data Science OpenIntro R Labs Learning Statistics with R: A tutorial for pyschology students and other beginners 12.8 GIS and Urban Planning Geocomputation in R stplanr: A package for sustainable transport planning in R "],
["miscellaneous-notes.html", "Section 13 Miscellaneous notes", " Section 13 Miscellaneous notes "]
]
