[
["data-wrangling.html", "Section 8 Data Wrangling 8.1 Row verbs 8.2 Practice", " Section 8 Data Wrangling We will mostly be using the tidyr and dplyr packages for wrangling. With those packages, most wrangling is done with 6 “data verbs.” These are select(), mutate(), filter(), arrange(), group_by(), and summarise(). One quick note: summarise can be spelled the British or American way (as can any word with dual spellings). Much of the software was developed by people in New Zealand, hence the British spellings. I learned with British spellings so that’s what I use, but it works either way. We can divide our verbs into 3 categories: row verbs, column verbs, and aggregate verbs. All of the verbs work in a similar way. The general structure is verb(data, action). 8.1 Row verbs The two row verbs are filter() and arrange(). Filter works by taking out rows that we don’t want in our data. Arrange works by ordering the rows in some way. We will talk about filter first. 8.1.1 Filter Filter takes in boolean statements and returns only the TRUE ones. For example, &gt;, &lt;, and == are boolean statements. The double equal is R’s way of saying something “is equivalent to.” Let’s start by creating a dataframe of only Saturday trips. # create a new dataframe called weekend_trips saturday_trips &lt;- filter(nice_ride_2018, start_day == &quot;Sat&quot;) dim(saturday_trips) # check that you have these dimensions ## [1] 66778 22 We can also make a dataframe of trips that ended after 12 noon. after_12 &lt;- filter(nice_ride_2018, end_hour &gt; 12) dim(after_12) ## [1] 277163 22 Let’s say we want some combination of filters. Maybe we want only the Saturday trips that ended after noon? We will use the &amp; operator in between filter actions. saturday_after_12 &lt;- filter(nice_ride_2018, end_hour &gt; 12 &amp; start_day == &quot;Sat&quot;) dim(saturday_after_12) ## [1] 47806 22 Now let’s make a dataframe of all the trips on a weekend day. We will use the | (or) operator in between filter actions. weekend_trips &lt;- filter(nice_ride_2018, start_day == &quot;Sat&quot; | start_day == &quot;Sun&quot;) dim(weekend_trips) ## [1] 129776 22 Let’s add Friday to that list. weekendFri_trips &lt;- filter(nice_ride_2018, start_day == &quot;Sat&quot; | start_day == &quot;Sun&quot; | start_day == &quot;Fri&quot;) dim(weekendFri_trips) ## [1] 190271 22 It gets a little long to write that all out, and this is a pretty simply query. Luckily, R has an %in% operator to filter “in bulk.” We would get the same results as above by writing: weekendFri_trips &lt;- filter(nice_ride_2018, start_day %in% c(&quot;Sat&quot;, &quot;Sun&quot;, &quot;Fri&quot;)) dim(weekendFri_trips) ## [1] 190271 22 8.2 Practice "]
]
